#!/usr/bin/env pagsh

set -e

usage="Usage: $0 [-d]"

case "$KRB5CCNAME" in
    DIR:*) oldcachetype=DIR;;
    FILE:*) oldcachetype=FILE;;
    *) oldcachetype=FILE;;
esac
cachetype=$oldcachetype

while getopts "dh" options; do
    case $options in
        d ) cachetype=DIR;;
        h ) echo "$usage"; exit 0;;
        \? ) echo "$usage"
            exit 1;;
        * ) echo "$usage"
            exit 1;;
    esac
done
shift `expr $OPTIND - 1 || :`

# Set diropt to -d (for mktemp and cont-renew-notify) for DIR caches,
# and leave empty for FILE caches
if [ "$cachetype" = "DIR" ]; then
    diropt="-d"
else
    diropt=""
fi

screen=`which screen || :`
if [ ! -x "$screen" ]; then
    attachandrun=`which attachandrun`
    if [ ! -x "$attachandrun" ]; then
        echo "Neither screen nor attachandrun is available."
        echo "Add screen to your path, and then try again."
        exit 1
    fi
    if attachandrun --check gnu screen; then
        screen="$attachandrun gnu screen screen"
    else
        echo "screen is available neither in your path nor in the gnu locker."
        echo "Add screen to your path, and then try again."
        exit 1
    fi
fi

# Check for pre-existing screens.
screenlist=`$screen -list | grep '[0-9]\.pag' || :`
if [ "x$screenlist" != "x" ]; then
    echo "Found a pre-existing owl-screen session:"
    echo "$screenlist"
    echo "You probably want to reattach it instead."
    echo
    exit 1
fi

# Get AFS tokens for the screen session.
# We are now in a new PAG (because of pagsh).
# If you want to get tokens for other cells, list them in ~/.xlog
aklog || echo "Failed to get new tokens"

# Use separate kerberos tickets for screen. Even if we accidentally
# (or intentionally) log out, screen and owl will still have tickets.
NEWKRB5=`mktemp -t $diropt "krb5cc_${USER}_screen_XXXXXXXXXX"`

# Copy the tickets we obtained on login to the screen tickets.
KRB5CCNAME=`echo "$KRB5CCNAME" | sed 's/^\(FILE\|DIR\)://'`
if [ "x$KRB5CCNAME" != "x" ]; then
    if [ "$oldcachetype" = "DIR" ]; then
        # We're creating a DIR cache, and want to copy the whole old cache
        cp "$KRB5CCNAME"/* "$NEWKRB5/"
    elif [ "$cachetype" = "DIR" ]; then
        # We're converting a FILE cache to a DIR cache
        cp "$KRB5CCNAME" "$NEWKRB5/tktorig"
        echo tktorig > "$NEWKRB5/primary"
    else
        cp "$KRB5CCNAME" "$NEWKRB5"
    fi
else
    echo "No tickets; not copying to new CC"
fi

# Now actually use the new tickets.
KRB5CCNAME=$cachetype:$NEWKRB5; export KRB5CCNAME

# Repeat for krb4 if appropriate.
if [ "x$KRBTKFILE" != "x" ]; then
   NEWKRB4=`mktemp -t "tkt_${USER}_screen_XXXXXXXXXX"`
   KRBTKFILE=`echo "$KRBTKFILE" | sed 's/^FILE://'`
   cp "$KRBTKFILE" "$NEWKRB4"
   KRBTKFILE=$NEWKRB4; export KRBTKFILE
fi

# Renew tickets and tokens.
contrenew=`which cont-renew-notify || :`
if [ ! -x "$contrenew" ]; then
    attach -n -q sipb
    contrenew=`athdir /mit/sipb`/cont-renew-notify
fi
if [ ! -x "$contrenew" ]; then
    zwrite "${ATHENA_USER:-$USER}" -d -m "$0: cont-renew doesn't exist on `hostname`... Not doing renewals"
    contrenew=/bin/true
fi
nohup $contrenew < /dev/null > /dev/null 2> /dev/null &

# Name the screen pag so we can reattach the right screen later.
$screen -S pag
