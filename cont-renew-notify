#!/bin/sh

# Originally copied from /mit/broder/bin/renew-and-notify

# Modified to zephyr about expiring tickets, rather than sending mail,
# and to assume that ticket setup has already been done.

# Kill any other copies of this program currently running, since it
# doesn't get cleaned up after screen exits.
#
# Doesn't seem to currently work and the cont-renew-notify process can
# sometimes kill off itself.
#
#command=`basename $0`
#kill `pgrep -u $USER -f "$command" | grep -v $$` > /dev/null 2> /dev/null

usage="Usage: $0 [-d|-f]"
allcaches=false
case "$KRB5CCNAME" in
    # We have a DIR: cache. Assume we should renew everything
    DIR:/*) allcaches=true;;
esac
while getopts "fdh" options; do
    case $options in
        f ) allcaches=false;;
        d ) allcaches=true;;
        h ) echo "$usage"; exit 0;;
        \? ) echo "$usage"
            exit 1;;
        * ) echo "$usage"
            exit 1;;
    esac
done
shift `expr $OPTIND - 1 || :`

# Default to zephyring.
if [ "x$ZEPHYR_SCREEN_NOTIFY" = "x" ]; then
    ZEPHYR_SCREEN_NOTIFY='zwrite -n "${ATHENA_USER:-$USER}"'
fi

# Figure out where date is.
date=date
date -d "01/01/2008 12:00:00" > /dev/null 2> /dev/null
if [ $? -ne 0 ]; then
    date="athrun gnu gdate"
fi

# Figure out whether to use echo -e.
echo=echo
echolines=`$echo "1\n2" | wc -l`
if [ $echolines -ne 2 ]; then
    echo="echo -e"
fi

# Sleep 7 seconds to minimize confusion.  In most cases, users will
# only have one zephyr presence.  If they have more than one, though,
# the zephyr notification may succeed before the current session comes
# up.  Some Sun machines will take a while to load barnowl; they'll
# fail at least once before succeeding on a subsequent notification.
sleep 7

notify_user()
{
    message="$1"

    notifystatus="-1"
    notifytries=0

    # Notify user.  If notification is not successful, retry every
    # 15 seconds up to 7 tries.  This may occur if
    # cont-renew-notify is started before barnowl and barnowl is
    # taking a long time to load.
    while [ "$notifystatus" -ne "0" ] && [ "$notifytries" -lt "7" ]; do
        $echo "$message" | eval "$ZEPHYR_SCREEN_NOTIFY"
        notifystatus=$?
        if [ "$notifystatus" -ne "0" ]; then
            notifytries=`expr $notifytries + 1`
            sleep 15
        fi
    done
}

renew_cache()
{
    ccache_name=$1

    echo "Renewing${ccache_name:+ '$ccache_name'}"
    kinit -R ${ccache_name:+-c "$ccache_name"}
    sleep 1
  
    expirestr=`LC_TIME=C klist ${ccache_name:+-c "$ccache_name"} | grep 'renew until' | sed -e 's/[\t ]*renew until //' | head -n1`
    principal=`klist ${ccache_name:+-c "$ccache_name"} | grep 'Default principal:' | sed -e 's/Default principal: \(.*\)$/\1/'`

    if [ -z "$expirestr" ]; then
	expire=0
	message="You do not have renewable tickets for $principal on `hostname`.\nRun \"kinit -l7d\" to get renewable tickets.\n"
    else
	expire=`$date -d "$expirestr" +%s`
	
	message="Your tickets for $principal on `hostname` will expire within the next 24 hours.\nRun \"kinit -l7d\" to get new renewable tickets."
    fi

    # Non-renewable tickets will result in a negative difference.
    now=`$date +%s`
    difference=`expr $expire - $now`
    if [ "$difference" -lt "86400" ]; then
        # There's a problem
	problems_new="$problems_new $expire-$ccache_name "

        # Check if we knew about this last cycle
        case "$problems" in
            *" $expire-$ccache_name "*) true;;
            *) notify_user "$message";;
        esac
    fi
}

case "$KRB5CCNAME" in
    *" "*)
        # KRB5CCNAME contains a space. This may interfere with the parsing of
        # "klist -l". However, it likely won't interfere with normal clients,
        # like for example the zwrite we use below to warn about this
        # situation.

        message="Warning: your KRB5CCNAME on `hostname` contains whitespace.\nThis may break cont-renew-notify."
        notify_user "$message"
        ;;
esac

problems=" "
while [ 1 ]; do
    echo
    echo "Renewing at `$date`"
    problems_new=" "
    if [ "$allcaches" = "true" ]; then
        klist -l
        caches=`klist -l | awk 'NR > 2 { print $2 }'`
        for cache in $caches; do
            renew_cache "$cache";
        done
    else
        renew_cache "$KRB5CCNAME"
    fi
    problems=$problems_new

    # ccache_name is interesting only for DIR caches. krb524init is only
    # interesting for machines that support krb4. I believe these don't
    # overlap at all, so I don't feel too bad about not handling multiple
    # sets of krb4 caches.
    hash krb524init > /dev/null 2>&1 && krb524init
    hash aklog > /dev/null 2>&1 && aklog
    zctl load > /dev/null 2> /dev/null
  
    sleep 3600
done
